configfile: "config.json"

rule all:
    input:
        "../original_data/DP8480005516BR_L01_9_1.fq.gz",
        "../original_data/DP8480005516BR_L01_9_2.fq.gz",
        "genome.sizes",
        "fragments.tsv.gz",
        "fragments.tsv.gz.tbi",
        "fragment_size_distribution_GRCh38.tsv",
        "fragment_size_distribution_mm10.tsv",
        "per_cell_barcode_total_fragment_count.tsv",
        "per_cell_barcode_total_fragment_count_GRCh38.tsv",
        "per_cell_barcode_total_fragment_count_mm10.tsv",
        "reads.bed.gz",
        "macs2_pk/aggregate_peaks.narrowPeak",
        "aggregate_peaks_formatted.bed",
        "peak_read_ov.tsv.gz",
        "raw_mtx/barcodes.tsv",
        "raw_mtx/peaks.bed",
        "raw_mtx/matrix.mtx",
        "raw_mtx/features.tsv",
        "filtered_mtx/barcodes.tsv",
        "filtered_mtx/matrix.mtx",
        "filtered_mtx/features.tsv"

rule getGenomeSize:
    input:
        fz=config["faSize_bin"],
        cf=config["chromap_fa"]
    output:
        "genome.sizes"
    shell:
        ''' {input.fz} -detailed {input.cf} | sort -k1,1 -k2,2n > {output}
        '''

rule chromap:
    input:
        cr=config["chromap_bin"],
        bz=config["bgzip_bin"],
        tx=config["tabix_bin"],
        r1="../original_data/DP8480005516BR_L01_9_1.fq.gz",
        r2="../original_data/DP8480005516BR_L01_9_2.fq.gz",
        wl="../whitelist.txt"
    output:
        "fragments.tsv.gz",
        "fragments.tsv.gz.tbi"
    log:
        "logs/chromap.err"
    params:
        idx=config["chromap_idx"],
        fa=config["chromap_fa"]
    threads: 10
    shell:
        ''' {input.cr} -t {threads} --preset atac -x {params.idx} -r {params.fa} --bc-error-threshold 0 --trim-adapters --read-format bc:0:19,r1:20:-1 \
            -1 {input.r1} -2 {input.r2} -b {input.r1} \
            --barcode-whitelist {input.wl} \
            -o fragments.tsv 2> {log}
            {input.bz} fragments.tsv && \
            {input.tx} -p bed fragments.tsv.gz
        '''

rule fragToReads:
    input:
        bp=config["bedClip_bin"],
        frag="fragments.tsv.gz",
        gs="genome.sizes"
    output:
        met="per_cell_barcode_total_fragment_count.tsv",
        bed="reads.bed.gz"
    shell:
        ''' ../../convert_frag_to_reads.py | \
            {input.bp} stdin {input.gs} stdout | \
            sort -k1,1 -k2,2n | \
            gzip > {output.bed}
        '''

rule peakCalling:
    input:
        mc=config["macs2_bin"],
        rd="reads.bed.gz"
    output:
        "macs2_pk/aggregate_peaks.narrowPeak"
    log:
        "logs/macs2.err"
    params:
        gs=config["macs2_gsize"],
        broad=config["macs2_bpk"],
        fmt=config["macs2_format"],
        shift=config["macs2_shift"]
    shell:
        ''' {input.mc} callpeak -t {input.rd} -g {params.gs} {params.broad} \
            -f {params.fmt} {params.shift} --keep-dup all \
            -B --SPMR --outdir macs2_pk -n aggregate \
            2> {log}
        '''
rule formatPeak:
    input:
        npk="macs2_pk/aggregate_peaks.narrowPeak",
        bdt=config["bedtools_bin"],
        bl=config["blacklist"]
    output:
        "aggregate_peaks_formatted.bed"
    shell:
        ''' cut -f 1-4 {input.npk} | \
            sed '/chrM/d' | \
            sort -k1,1 -k2,2n > {output}
        '''

rule prepareReadPeaksOVs:
    input:
        bdt=config["bedtools_bin"],
        reads="reads.bed.gz",
        peaks="aggregate_peaks_formatted.bed",
        gsize="genome.sizes"
    output:
        "peak_read_ov.tsv.gz"
    shell:
        ''' {input.bdt} intersect -a {input.peaks} -b {input.reads} \
            -wo -sorted -g {input.gsize} | sort -k8,8 | \
            {input.bdt} groupby -g 8 -c 4 -o freqdesc | gzip > {output}
        '''

rule generate10xStyleOutput1:
    input:
        peaks="aggregate_peaks_formatted.bed",
        ov="peak_read_ov.tsv.gz"
    output:
        bc="raw_mtx/barcodes.tsv",
        pk="raw_mtx/peaks.bed"
    shell:
        ''' cut -f 1-3 {input.peaks} > {output.pk}
            zcat {input.ov} | cut -f 1 > {output.bc}
        '''

rule generate10xStyleOutput2:
    input:
        ov="peak_read_ov.tsv.gz",
        bc="raw_mtx/barcodes.tsv",
        peaks="aggregate_peaks_formatted.bed"
    output:
        "raw_mtx/matrix.mtx"
    shell:
        ''' ../../generate_csc_mtx.py
        '''

rule prepareSoloFilter:
    input:
        "raw_mtx/peaks.bed"
    output:
        "raw_mtx/features.tsv"
    shell:
        ''' awk 'BEGIN{{OFS="\t"}}{{print $1 "-" $2 "-" $3, $1 "-" $2 "-" $3}}' \
            {input} > {output}
        '''

rule soloFilterCell:
    input:
        pg=config["star_bin"],
        bc="raw_mtx/barcodes.tsv",
        ct="raw_mtx/matrix.mtx",
        ft="raw_mtx/features.tsv"
    output:
        "filtered_mtx/barcodes.tsv",
        "filtered_mtx/matrix.mtx",
        "filtered_mtx/features.tsv"
    shell:
        ''' {input.pg} --runMode soloCellFiltering \
            raw_mtx/ filtered_mtx/ \
            --soloCellFilter EmptyDrops_CR
        '''

rule getFragmentSizeDistributionChromap:
    input:
        "fragments.tsv.gz"
    output:
        hs="fragment_size_distribution_GRCh38.tsv",
        mm="fragment_size_distribution_mm10.tsv"
    shell:
        ''' echo -e "size\tcount" > {output.hs}
            zcat {input} | sed '/^#/d' | grep GRCh38 | awk '{{print $3-$2}}' | \
            sort | uniq -c | sort -b -k2,2n | \
            awk 'BEGIN{{OFS="\t"}}{{print $2, $1}}' >> {output.hs}
            echo -e "size\tcount" > {output.mm}
            zcat {input} | sed '/^#/d' | grep mm10 | awk '{{print $3-$2}}' | \
            sort | uniq -c | sort -b -k2,2n | \
            awk 'BEGIN{{OFS="\t"}}{{print $2, $1}}' >> {output.mm}
        '''

rule chekNumReadsSpecies:
    input:
        "fragments.tsv.gz"
    output:
        hs="per_cell_barcode_total_fragment_count_GRCh38.tsv",
        mm="per_cell_barcode_total_fragment_count_mm10.tsv"
    shell:
        ''' zcat {input} | grep GRCh38 | cut -f 4 | sort | uniq -c | \
            awk 'BEGIN{{OFS="\t"}}{{print $1, $2}}' > {output.hs}
            zcat {input} | grep mm10 | cut -f 4 | sort | uniq -c | \
            awk 'BEGIN{{OFS="\t"}}{{print $1, $2}}' > {output.mm}
        '''

